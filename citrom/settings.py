"""
Django settings for citrom project.

Generated by 'django-admin startproject' using Django 3.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path
import os
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = '3v2f*z9vtv=2ncu%ka*d^)h=qyx8=i0aga0&c9$i4w5_*pf*7@'
SECRET_KEY = 'test_keytv=2ncu%ka*d^)h=qyx8=i0aga0&c9$i4w5_*pf*7@'

# SECURITY WARNING: don't run with debug turned on in production!
# python manage.py runserver --insecure 
DEBUG = True

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    #'debug_toolbar',#debug_toolbar

    'smalltasks',
    'index',
    'user',
    'newpost',
    'post',
    'usermanager',
    'mymodels.apps.ModelsConfig',
    # 'user.apps.UserConfig',
    'search',
    'sitemap',
]

MIDDLEWARE = [
    # 'mypackage.dev_tools.RequestTimeMiddleware.RequestTimeMiddleware', #смотрим время выполненяи запроса
    #'debug_toolbar.middleware.DebugToolbarMiddleware', #debug_toolbar
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # 'mypackage.set_views_cookie.SetDefaulCookie',
]

AUTH_USER_MODEL = 'mymodels.CustomUser'

ROOT_URLCONF = 'citrom.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, "templates")],  # html шаблоны в корне, папке templates
        'APP_DIRS': True,  # true ищет шаблоны в приложениях, но не ограничиваетсчя ими т.к. выше указана папка templates в корне
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                # менеджер контекста для установки опций фильтра просмотров gore, politic и т.д.
                'mypackage.context_processors.set_options_views',
            ],
        },
    },
]

WSGI_APPLICATION = 'citrom.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases



DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# смотрим запрос и время его выполнения в БД
# LOGGING = {
#     'version': 1,
#     'handlers': {
#         'console': {
#             'class': 'logging.StreamHandler',
#         },
#     },
#     'loggers': {
#         'django.db.backends': {
#             'level': 'DEBUG',
#         },
#     },
#     'root': {
#         'handlers': ['console'],
#     }
# }

# Кеширование, используется стандартное кеширование вместо memcached. Устанавливать его на windows, большая и не благодарная история
# https://djbook.ru/rel3.0/topics/cache.html
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'unique-snowflake',
        'TIMEOUT': 3600,# время жизни кеша по умолчанию - час
        'CACHESIZE' : 128, #МБ памяти для кеша. 64 - по умолчанию
        'OPTIONS': {
            'MAX_ENTRIES': 1000 #максимальное количество элементов в кэше перед началом удаления старых значений
            
        }
    }
}


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'ru'

# TIME_ZONE = 'GMT'
TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/


STATIC_ROOT = '/static'
STATIC_URL = '/static/'
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'static'),
)
# Основной url для управления медиафайлами
MEDIA_URL = '/media/'

# Путь хранения картинок
MEDIA_ROOT = os.path.join(BASE_DIR, 'media/')


# INTERNAL_IPS = [
#     '127.0.0.1', #debug_toolbar
# ]


EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'mail.hosting.myhosting.ru'
EMAIL_PORT = '587'
EMAIL_HOST_USER = 'HOST_USE@mail.ru'
EMAIL_HOST_PASSWORD = 'HOST_PASSWORD'
EMAIL_USE_TLS = True
EMAIL_USE_SSL = False

#Логирование
# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'formatters': {
#         'console': {
#             'format': '%(name)-12s %(levelname)-8s %(message)s'
#         },
#         'file': {
#             'format': '%(asctime)s %(name)-12s %(levelname)-8s %(message)s'
#         }
#     },
#     'handlers': {
#         'console': {
#             'class': 'logging.StreamHandler',
#             'formatter': 'console'
#         },
#         'file': {
#             'level': 'DEBUG',
#             'class': 'logging.FileHandler',
#             'formatter': 'file',
#             'filename': 'debug.log'
#         }
#     },
#     'loggers': {
#         '': {
#             'level': 'DEBUG',
#             'handlers': ['console', 'file']
#         }
#     }
# }